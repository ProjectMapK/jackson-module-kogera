package io.github.projectmapk.jackson.module.kogera

import com.fasterxml.jackson.databind.MapperFeature
import com.fasterxml.jackson.databind.module.SimpleModule
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.CopySyntheticConstructorParameterAnnotations
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.NullIsSameAsDefault
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.NullToEmptyCollection
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.NullToEmptyMap
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.SingletonSupport
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.StrictNullChecks
import io.github.projectmapk.jackson.module.kogera.KotlinFeature.UseJavaDurationConversion
import io.github.projectmapk.jackson.module.kogera.annotationIntrospector.KotlinFallbackAnnotationIntrospector
import io.github.projectmapk.jackson.module.kogera.annotationIntrospector.KotlinPrimaryAnnotationIntrospector
import io.github.projectmapk.jackson.module.kogera.deser.deserializers.KotlinDeserializers
import io.github.projectmapk.jackson.module.kogera.deser.deserializers.KotlinKeyDeserializers
import io.github.projectmapk.jackson.module.kogera.deser.singletonSupport.KotlinBeanDeserializerModifier
import io.github.projectmapk.jackson.module.kogera.deser.valueInstantiator.KotlinInstantiators
import io.github.projectmapk.jackson.module.kogera.ser.serializers.KotlinKeySerializers
import io.github.projectmapk.jackson.module.kogera.ser.serializers.KotlinSerializers
import java.io.Serializable
import java.util.*

/**
 * @param cacheSize
 *   Default: [Builder.DEFAULT_CACHE_SIZE]. See [CacheSize] for details.
 * @param nullToEmptyCollection
 *   Default: false. See [KotlinFeature.NullToEmptyCollection] for details.
 * @param nullToEmptyMap
 *   Default: false. See [KotlinFeature.NullToEmptyMap] for details.
 * @param nullIsSameAsDefault
 *   Default: false. See [KotlinFeature.NullIsSameAsDefault] for details.
 * @param singletonSupport
 *   Default: false. See [KotlinFeature.SingletonSupport] for details.
 * @param strictNullChecks
 *   Default: false. See [KotlinFeature.StrictNullChecks] for details.
 * @param copySyntheticConstructorParameterAnnotations
 *   Default false.  See [KotlinFeature.CopySyntheticConstructorParameterAnnotations] for details.
 * @param useJavaDurationConversion
 *   Default: false. See [KotlinFeature.UseJavaDurationConversion] for details.
 */
// Do not delete default arguments,
// as this will cause an error during initialization by Spring's Jackson2ObjectMapperBuilder.
public class KotlinModule private constructor(
    public val cacheSize: CacheSize = CacheSize(),
    public val nullToEmptyCollection: Boolean = NullToEmptyCollection.enabledByDefault,
    public val nullToEmptyMap: Boolean = NullToEmptyMap.enabledByDefault,
    public val nullIsSameAsDefault: Boolean = NullIsSameAsDefault.enabledByDefault,
    public val singletonSupport: Boolean = SingletonSupport.enabledByDefault,
    public val strictNullChecks: Boolean = StrictNullChecks.enabledByDefault,
    public val copySyntheticConstructorParameterAnnotations: Boolean =
        CopySyntheticConstructorParameterAnnotations.enabledByDefault,
    public val useJavaDurationConversion: Boolean = UseJavaDurationConversion.enabledByDefault
) : SimpleModule(KotlinModule::class.java.name, kogeraVersion) { // kogeraVersion is generated by building.
    private constructor(builder: Builder) : this(
        builder.cacheSize,
        builder.isEnabled(NullToEmptyCollection),
        builder.isEnabled(NullToEmptyMap),
        builder.isEnabled(NullIsSameAsDefault),
        builder.isEnabled(SingletonSupport),
        builder.isEnabled(StrictNullChecks),
        builder.isEnabled(CopySyntheticConstructorParameterAnnotations),
        builder.isEnabled(UseJavaDurationConversion)
    )

    @Deprecated(
        message = "This is an API for compatibility; use Builder.",
        level = DeprecationLevel.HIDDEN
    )
    public constructor() : this(Builder())

    private val cache: ReflectionCache = ReflectionCache(cacheSize.initialCacheSize, cacheSize.maxCacheSize)
    private val primaryAnnotationIntrospector: KotlinPrimaryAnnotationIntrospector =
        KotlinPrimaryAnnotationIntrospector(nullToEmptyCollection, nullToEmptyMap, cache)
    private val fallbackAnnotationIntrospector: KotlinFallbackAnnotationIntrospector =
        KotlinFallbackAnnotationIntrospector(strictNullChecks, useJavaDurationConversion, cache)

    init {
        _serializers = KotlinSerializers(cache)
        _deserializers = KotlinDeserializers(cache, useJavaDurationConversion)

        _keySerializers = KotlinKeySerializers(cache)
        _keyDeserializers = KotlinKeyDeserializers

        _abstractTypes = ClosedRangeResolver

        _valueInstantiators = KotlinInstantiators(cache, nullToEmptyCollection, nullToEmptyMap, nullIsSameAsDefault)

        if (singletonSupport) {
            _deserializerModifier = KotlinBeanDeserializerModifier(cache)
        }

        setMixInAnnotation(ClosedRange::class.java, ClosedRangeMixin::class.java)
    }

    public companion object {
        @Suppress("ConstPropertyName")
        private const val serialVersionUID = 3L
    }

    override fun setupModule(context: SetupContext) {
        super.setupModule(context)

        if (!context.isEnabled(MapperFeature.USE_ANNOTATIONS)) {
            throw IllegalStateException(
                "The Jackson Kotlin module requires USE_ANNOTATIONS to be true or it cannot function"
            )
        }

        context.insertAnnotationIntrospector(primaryAnnotationIntrospector)
        context.appendAnnotationIntrospector(fallbackAnnotationIntrospector)

        if (copySyntheticConstructorParameterAnnotations) {
            context.setClassIntrospector(KotlinClassIntrospector)
        }
    }

    /**
     * @property maxCacheSize Kogera's internal processing requires a certain cache size.
     *   The lower limit is set to 16 for extreme use cases,
     *   but it is recommended to set it to 100 or more unless there is a very clear reason.
     *
     * @throws IllegalArgumentException Specified [maxCacheSize] was less than the 16.
     * @throws IllegalArgumentException A value less than [maxCacheSize] was entered for [initialCacheSize].
     */
    public data class CacheSize(
        val initialCacheSize: Int = Builder.DEFAULT_CACHE_SIZE,
        val maxCacheSize: Int = Builder.DEFAULT_CACHE_SIZE
    ) : Serializable {
        /**
         * Set the same size for [initialCacheSize] and [maxCacheSize].
         */
        public constructor(cacheSize: Int) : this(cacheSize, cacheSize)

        init {
            if (maxCacheSize < 16) {
                throw IllegalArgumentException(
                    "The maxCacheSize must be at least 16. The recommended value is 100 or more."
                )
            }
            if (maxCacheSize < initialCacheSize) {
                throw IllegalArgumentException(
                    "maxCacheSize($maxCacheSize) was less than initialCacheSize($initialCacheSize)."
                )
            }
        }
    }

    public class Builder {
        public companion object {
            internal const val DEFAULT_CACHE_SIZE = 512
        }

        public var cacheSize: CacheSize = CacheSize()
            private set

        private val bitSet: BitSet = KotlinFeature.defaults

        public fun withCacheSize(cacheSize: CacheSize): Builder = apply {
            this.cacheSize = cacheSize
        }

        public fun enable(feature: KotlinFeature): Builder = apply {
            bitSet.or(feature.bitSet)
        }

        public fun disable(feature: KotlinFeature): Builder = apply {
            bitSet.andNot(feature.bitSet)
        }

        public fun configure(feature: KotlinFeature, enabled: Boolean): Builder =
            when {
                enabled -> enable(feature)
                else -> disable(feature)
            }

        public fun isEnabled(feature: KotlinFeature): Boolean =
            bitSet.intersects(feature.bitSet)

        public fun build(): KotlinModule =
            KotlinModule(this)
    }
}
